/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js'
import * as beet from '@metaplex-foundation/beet'
import * as beetSolana from '@metaplex-foundation/beet-solana'
import { RoyaltyShare, royaltyShareBeet } from '../types/RoyaltyShare'

/**
 * Arguments used to create {@link NftMetadataUnique}
 * @category Accounts
 * @category generated
 */
export type NftMetadataUniqueArgs = {
  metadata: web3.PublicKey
  royaltyBpsOverride: beet.COption<number>
  royaltiesShareOverride: beet.COption<RoyaltyShare[]>
  permittedSignersOverride: beet.COption<web3.PublicKey[]>
}

export const nftMetadataUniqueDiscriminator = [229, 80, 79, 8, 235, 126, 63, 9]
/**
 * Holds the data for the {@link NftMetadataUnique} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class NftMetadataUnique implements NftMetadataUniqueArgs {
  private constructor(
    readonly metadata: web3.PublicKey,
    readonly royaltyBpsOverride: beet.COption<number>,
    readonly royaltiesShareOverride: beet.COption<RoyaltyShare[]>,
    readonly permittedSignersOverride: beet.COption<web3.PublicKey[]>
  ) {}

  /**
   * Creates a {@link NftMetadataUnique} instance from the provided args.
   */
  static fromArgs(args: NftMetadataUniqueArgs) {
    return new NftMetadataUnique(
      args.metadata,
      args.royaltyBpsOverride,
      args.royaltiesShareOverride,
      args.permittedSignersOverride
    )
  }

  /**
   * Deserializes the {@link NftMetadataUnique} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [NftMetadataUnique, number] {
    return NftMetadataUnique.deserialize(accountInfo.data, offset)
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link NftMetadataUnique} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<NftMetadataUnique> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    )
    if (accountInfo == null) {
      throw new Error(`Unable to find NftMetadataUnique account at ${address}`)
    }
    return NftMetadataUnique.fromAccountInfo(accountInfo, 0)[0]
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      'AJ5Hh5q4HegZWWu1ScY7ZRA6zELXmRzEWS5EXFSKqBC6'
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, nftMetadataUniqueBeet)
  }

  /**
   * Deserializes the {@link NftMetadataUnique} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [NftMetadataUnique, number] {
    return nftMetadataUniqueBeet.deserialize(buf, offset)
  }

  /**
   * Serializes the {@link NftMetadataUnique} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return nftMetadataUniqueBeet.serialize({
      accountDiscriminator: nftMetadataUniqueDiscriminator,
      ...this,
    })
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link NftMetadataUnique} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: NftMetadataUniqueArgs) {
    const instance = NftMetadataUnique.fromArgs(args)
    return nftMetadataUniqueBeet.toFixedFromValue({
      accountDiscriminator: nftMetadataUniqueDiscriminator,
      ...instance,
    }).byteSize
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link NftMetadataUnique} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: NftMetadataUniqueArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      NftMetadataUnique.byteSize(args),
      commitment
    )
  }

  /**
   * Returns a readable version of {@link NftMetadataUnique} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      metadata: this.metadata.toBase58(),
      royaltyBpsOverride: this.royaltyBpsOverride,
      royaltiesShareOverride: this.royaltiesShareOverride,
      permittedSignersOverride: this.permittedSignersOverride,
    }
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const nftMetadataUniqueBeet = new beet.FixableBeetStruct<
  NftMetadataUnique,
  NftMetadataUniqueArgs & {
    accountDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['metadata', beetSolana.publicKey],
    ['royaltyBpsOverride', beet.coption(beet.u16)],
    ['royaltiesShareOverride', beet.coption(beet.array(royaltyShareBeet))],
    [
      'permittedSignersOverride',
      beet.coption(beet.array(beetSolana.publicKey)),
    ],
  ],
  NftMetadataUnique.fromArgs,
  'NftMetadataUnique'
)
