/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'
import { CollectionInput, collectionInputBeet } from '../types/CollectionInput'

/**
 * @category Instructions
 * @category CreateCollection
 * @category generated
 */
export type CreateCollectionInstructionArgs = {
  collectionInput: CollectionInput
}
/**
 * @category Instructions
 * @category CreateCollection
 * @category generated
 */
export const createCollectionStruct = new beet.FixableBeetArgsStruct<
  CreateCollectionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['collectionInput', collectionInputBeet],
  ],
  'CreateCollectionInstructionArgs'
)
/**
 * Accounts required by the _createCollection_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_] userPermissions
 * @property [_writable_] collection
 * @property [] seed
 * @category Instructions
 * @category CreateCollection
 * @category generated
 */
export type CreateCollectionInstructionAccounts = {
  authority: web3.PublicKey
  userPermissions: web3.PublicKey
  collection: web3.PublicKey
  seed: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const createCollectionInstructionDiscriminator = [
  156, 251, 92, 54, 233, 2, 16, 82,
]

/**
 * Creates a _CreateCollection_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateCollection
 * @category generated
 */
export function createCreateCollectionInstruction(
  accounts: CreateCollectionInstructionAccounts,
  args: CreateCollectionInstructionArgs,
  programId = new web3.PublicKey('AJ5Hh5q4HegZWWu1ScY7ZRA6zELXmRzEWS5EXFSKqBC6')
) {
  const [data] = createCollectionStruct.serialize({
    instructionDiscriminator: createCollectionInstructionDiscriminator,
    ...args,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.userPermissions,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.collection,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.seed,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
