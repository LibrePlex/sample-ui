/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet'
import * as web3 from '@solana/web3.js'

/**
 * @category Instructions
 * @category DeleteMetadata
 * @category generated
 */
export const deleteMetadataStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'DeleteMetadataInstructionArgs'
)
/**
 * Accounts required by the _deleteMetadata_ instruction
 *
 * @property [**signer**] authority
 * @property [] userPermissions
 * @property [_writable_] collection
 * @property [_writable_] metadata
 * @property [] mint
 * @property [_writable_] receiver
 * @category Instructions
 * @category DeleteMetadata
 * @category generated
 */
export type DeleteMetadataInstructionAccounts = {
  authority: web3.PublicKey
  userPermissions: web3.PublicKey
  collection: web3.PublicKey
  metadata: web3.PublicKey
  mint: web3.PublicKey
  receiver: web3.PublicKey
  systemProgram?: web3.PublicKey
  anchorRemainingAccounts?: web3.AccountMeta[]
}

export const deleteMetadataInstructionDiscriminator = [
  7, 241, 181, 162, 214, 254, 84, 251,
]

/**
 * Creates a _DeleteMetadata_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category DeleteMetadata
 * @category generated
 */
export function createDeleteMetadataInstruction(
  accounts: DeleteMetadataInstructionAccounts,
  programId = new web3.PublicKey('AJ5Hh5q4HegZWWu1ScY7ZRA6zELXmRzEWS5EXFSKqBC6')
) {
  const [data] = deleteMetadataStruct.serialize({
    instructionDiscriminator: deleteMetadataInstructionDiscriminator,
  })
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.userPermissions,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.collection,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.receiver,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ]

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc)
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  })
  return ix
}
